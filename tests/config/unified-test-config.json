{
  "name": "Janus Comprehensive Test Configuration",
  "version": "2.0.0", 
  "description": "Unified test configuration for SOCK_DGRAM Unix Socket API implementations",
  "protocol": {
    "type": "SOCK_DGRAM",
    "transport": "unix_domain_sockets",
    "message_format": "json",
    "reply_mechanism": "temporary_socket"
  },
  "test_categories": {
    "build_tests": {
      "description": "Verify implementations compile successfully",
      "timeout": 300,
      "parallel": true
    },
    "unit_tests": {
      "description": "Language-specific unit test suites", 
      "timeout": 600,
      "parallel": true
    },
    "integration_tests": {
      "description": "Cross-language communication tests",
      "timeout": 60,
      "parallel": false
    },
    "feature_tests": {
      "description": "Command variations and edge cases",
      "timeout": 45,
      "parallel": true
    },
    "performance_tests": {
      "description": "Performance and benchmarking tests",
      "timeout": 120,
      "parallel": false
    },
    "security_tests": {
      "description": "Security and protocol compliance tests",
      "timeout": 45,
      "parallel": true
    },
    "stress_tests": {
      "description": "Concurrent load and stress testing",
      "timeout": 180,
      "parallel": false
    }
  },
  "implementations": {
    "go": {
      "name": "GoJanus",
      "language": "go",
      "directory": "GoJanus",
      "build_command": ["go", "build", "-o", "janus", "./cmd/janus"],
      "test_command": ["go", "test", "./..."],
      "unified_binary": "./janus",
      "socket_path": "/tmp/go-janus-api.sock",
      "build_artifacts": ["janus"],
      "listen_args": ["--listen", "--socket", "/tmp/go-janus-api.sock"],
      "send_args": ["--send-to", "{target_socket}", "--command", "{command}", "--message", "{message}"],
      "test_timeout": 30
    },
    "rust": {
      "name": "RustJanus",
      "language": "rust", 
      "directory": "RustJanus",
      "build_command": ["cargo", "build"],
      "test_command": ["cargo", "test"],
      "unified_binary": "cargo run --bin janus --",
      "socket_path": "/tmp/rust-janus-api.sock",
      "build_artifacts": ["target/debug/janus"],
      "listen_args": ["--listen", "--socket", "/tmp/rust-janus-api.sock"],
      "send_args": ["--send-to", "{target_socket}", "--command", "{command}", "--message", "{message}"],
      "test_timeout": 30
    },
    "swift": {
      "name": "SwiftJanus",
      "language": "swift",
      "directory": "SwiftJanus", 
      "build_command": ["swift", "build"],
      "test_command": ["swift", "test"],
      "unified_binary": "./.build/debug/SwiftJanusDgram",
      "socket_path": "/tmp/swift-janus-api.sock",
      "build_artifacts": [".build/debug/SwiftJanusDgram"],
      "listen_args": ["--listen", "--socket", "/tmp/swift-janus-api.sock"],
      "send_args": ["--send-to", "{target_socket}", "--command", "{command}", "--message", "{message}"],
      "test_timeout": 30
    },
    "typescript": {
      "name": "TypeScriptJanus",
      "language": "typescript",
      "directory": "TypeScriptJanus",
      "build_command": ["npm", "run", "build"],
      "test_command": ["npm", "test"],
      "unified_binary": "node dist/bin/janus.js",
      "socket_path": "/tmp/typescript-janus-api.sock",
      "build_artifacts": ["dist/"],
      "listen_args": ["--listen", "--socket"],
      "send_args": ["--send-to", "{target_socket}", "--command", "{command}", "--message", "{message}"],
      "test_timeout": 30
    }
  },
  "test_matrix": {
    "self_communication": {
      "description": "Test each implementation communicates with itself",
      "combinations": [
        {"server": "go", "client": "go"},
        {"server": "rust", "client": "rust"},
        {"server": "swift", "client": "swift"},
        {"server": "typescript", "client": "typescript"}
      ]
    },
    "cross_communication": {
      "description": "Test all implementations can communicate with each other",
      "combinations": [
        {"server": "go", "client": "rust"},
        {"server": "go", "client": "swift"},
        {"server": "go", "client": "typescript"},
        {"server": "rust", "client": "go"},
        {"server": "rust", "client": "swift"},
        {"server": "rust", "client": "typescript"},
        {"server": "swift", "client": "go"},
        {"server": "swift", "client": "rust"},
        {"server": "swift", "client": "typescript"},
        {"server": "typescript", "client": "go"},
        {"server": "typescript", "client": "rust"},
        {"server": "typescript", "client": "swift"}
      ]
    }
  },
  "test_commands": {
    "ping": {
      "description": "Basic connectivity test",
      "command": "ping",
      "message": "hello",
      "expected_response_fields": ["status", "echo", "timestamp"],
      "expected_values": {
        "status": "pong"
      },
      "timeout": 5
    },
    "echo": {
      "description": "Echo message test",
      "command": "echo", 
      "message": "test_message",
      "expected_response_fields": ["status", "data", "original_length"],
      "expected_values": {
        "status": "success",
        "data": "test_message",
        "original_length": 12
      },
      "timeout": 5
    },
    "math_add": {
      "description": "Mathematical addition test",
      "command": "math",
      "args": {
        "operation": "add",
        "a": 15,
        "b": 25
      },
      "expected_response_fields": ["result", "operation"],
      "expected_values": {
        "result": 40,
        "operation": "add"
      },
      "timeout": 5
    },
    "math_multiply": {
      "description": "Mathematical multiplication test",
      "command": "math",
      "args": {
        "operation": "multiply",
        "a": 7,
        "b": 8
      },
      "expected_response_fields": ["result", "operation"],
      "expected_values": {
        "result": 56,
        "operation": "multiply"
      },
      "timeout": 5
    },
    "validate_data": {
      "description": "Data validation test",
      "command": "validate",
      "args": {
        "data": {
          "username": "test_user",
          "email": "test@example.com",
          "age": 25
        }
      },
      "expected_response_fields": ["valid"],
      "expected_values": {
        "valid": true
      },
      "timeout": 5
    },
    "special_chars": {
      "description": "Special character handling test",
      "command": "echo",
      "message": "special_chars_!@#$%^&*()",
      "expected_response_fields": ["status", "data"],
      "expected_values": {
        "status": "success",
        "data": "special_chars_!@#$%^&*()"
      },
      "timeout": 10
    },
    "unicode_handling": {
      "description": "Unicode character handling test",
      "command": "echo",
      "message": "unicode_æµ‹è¯•_ðŸš€_Ã©mojis",
      "expected_response_fields": ["status", "data"],
      "expected_values": {
        "status": "success",
        "data": "unicode_æµ‹è¯•_ðŸš€_Ã©mojis"
      },
      "timeout": 10
    },
    "long_message": {
      "description": "Long message handling test", 
      "command": "echo",
      "message": "long_message_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
      "expected_response_fields": ["status", "data"],
      "expected_values": {
        "status": "success"
      },
      "timeout": 15
    },
    "empty_message": {
      "description": "Empty message handling test",
      "command": "echo",
      "message": "",
      "expected_response_fields": ["status", "data"],
      "expected_values": {
        "status": "success",
        "data": ""
      },
      "timeout": 5
    },
    "json_payload": {
      "description": "JSON payload handling test",
      "command": "echo",
      "message": "{\"nested\": \"json\", \"number\": 42}",
      "expected_response_fields": ["status", "data"],
      "expected_values": {
        "status": "success",
        "data": "{\"nested\": \"json\", \"number\": 42}"
      },
      "timeout": 5
    },
    "null_handling": {
      "description": "Null value handling test",
      "command": "validate",
      "args": {
        "data": {
          "nullable_field": null,
          "empty_string": "",
          "zero_value": 0
        }
      },
      "expected_response_fields": ["valid"],
      "expected_values": {
        "valid": true
      },
      "timeout": 5
    },
    "timeout_test_quick": {
      "description": "Quick timeout test",
      "command": "timeout_test",
      "args": {
        "delay_seconds": 0.5
      },
      "expected_response_fields": ["completed", "actual_delay"],
      "expected_values": {
        "completed": true
      },
      "timeout": 2
    },
    "error_invalid_command": {
      "description": "Invalid command error test",
      "command": "nonexistent_command",
      "message": "test",
      "expect_error": true,
      "expected_error_code": "COMMAND_NOT_FOUND",
      "timeout": 5
    },
    "error_invalid_args": {
      "description": "Invalid arguments error test",
      "command": "math",
      "args": {
        "operation": "add",
        "a": "not_a_number",
        "b": 5
      },
      "expect_error": true,
      "expected_error_code": "VALIDATION_ERROR",
      "timeout": 5
    },
    "security_injection_test": {
      "description": "Security injection test",
      "command": "echo",
      "message": "; rm -rf /tmp/test; echo 'injected'",
      "expected_response_fields": ["status", "data"],
      "expected_values": {
        "status": "success",
        "data": "; rm -rf /tmp/test; echo 'injected'"
      },
      "timeout": 5
    }
  },
  "performance_benchmarks": {
    "latency_test": {
      "description": "Measure request-response latency",
      "iterations": 100,
      "concurrent_clients": 1,
      "target_p99_ms": 50,
      "target_avg_ms": 10
    },
    "throughput_test": {
      "description": "Measure message throughput",
      "duration_seconds": 30,
      "concurrent_clients": 10,
      "target_rps": 500
    },
    "concurrent_test": {
      "description": "Test concurrent client handling",
      "concurrent_clients": 20,
      "requests_per_client": 10,
      "target_success_rate": 0.95
    },
    "stress_test": {
      "description": "High-load stress testing",
      "concurrent_clients": 50,
      "requests_per_client": 100,
      "target_success_rate": 0.90
    }
  },
  "security_tests": [
    {
      "name": "sock_dgram_only",
      "description": "Verify only SOCK_DGRAM sockets are used",
      "validation": "source_code_scan"
    },
    {
      "name": "no_persistent_connections",
      "description": "Verify no persistent connections are maintained",
      "validation": "protocol_analysis"
    },
    {
      "name": "reply_to_mechanism",
      "description": "Verify proper reply_to socket usage",
      "validation": "message_inspection"
    },
    {
      "name": "json_message_format",
      "description": "Verify all messages use valid JSON",
      "validation": "message_parsing"
    },
    {
      "name": "timeout_handling", 
      "description": "Verify proper timeout handling",
      "validation": "timeout_simulation"
    },
    {
      "name": "input_validation",
      "description": "Verify input sanitization and validation",
      "validation": "malformed_input_test"
    }
  ],
  "environment": {
    "required_platforms": ["macos", "linux"],
    "optional_platforms": ["windows"],
    "temp_directory": "/tmp/janus-api-tests",
    "log_directory": "tests/test_logs",
    "report_directory": "tests/test_reports", 
    "max_parallel_tests": 4,
    "cleanup_on_exit": true,
    "socket_cleanup_timeout": 5
  },
  "reporting": {
    "formats": ["json", "markdown", "junit"],
    "include_logs": true,
    "include_timing": true,
    "include_environment": true,
    "retention_days": 30
  }
}